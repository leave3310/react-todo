{"version":3,"sources":["reducers/todo.ts","store/index.ts","views/TodoList/Filter.tsx","views/TodoList/TodoItem.tsx","views/TodoList/Form.tsx","views/TodoList/index.ts","views/TodoList/TodoList.tsx","actions/todo.ts","views/Todo/index.ts","views/Todo/Todo.tsx","index.tsx"],"names":["initialState","todos","displayTodos","filterDoneTodo","todo","id","name","done","filterDisplayTodos","filter","state","action","type","payload","newTodos","targetTodoIndex","findIndex","find","createStore","Filter","props","className","checked","onChange","switchFilterDoneTodo","TodoItem","history","useHistory","style","textDecoration","switchTodoDoneStatus","onClick","push","deleteTodo","Form","useState","setName","value","e","target","newTodo","Math","random","addTodo","TodoList","dispatch","useDispatch","useSelector","map","Todo","useParams","useEffect","getTodoById","Number","color","ReactDOM","render","store","exact","path","component","document","getElementById"],"mappings":"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","file":"static/js/main.1aad7177.chunk.js","sourcesContent":["import { Todo } from \"../types/todoList\";\nimport { TodoActionTypes } from '../actions/todo'\n\ninterface TodoState {\n    todos: Todo[]\n    displayTodos: Todo[]\n    filterDoneTodo: boolean\n    todo: Todo\n}\n\n\nconst initialState: TodoState = {\n    todos: [],\n    displayTodos: [],\n    filterDoneTodo: false,\n    todo: {\n        id: 0,\n        name: '無此資料',\n        done: false\n    }\n}\n\nconst filterDisplayTodos = (filterDoneTodo: boolean, todos: Todo[]) => {\n    if (filterDoneTodo) return todos.filter((todo) => !todo.done)\n\n    return [...todos]\n}\n\nconst todos = (state = initialState, action: TodoActionTypes): TodoState => {\n    switch (action.type) {\n        case 'ADD_TODO':\n            return {\n                ...state,\n                todos: [...state.todos, action.payload],\n                displayTodos: filterDisplayTodos(\n                    state.filterDoneTodo, [...state.todos, action.payload]\n                )\n            }\n        case 'DELETE_TODO': {\n            const newTodos = state.todos.filter((todo: Todo) => (todo.id !== action.payload))\n            return {\n                ...state,\n                todos: [...newTodos],\n                displayTodos: filterDisplayTodos(state.filterDoneTodo, [...newTodos])\n            }\n        }\n        case 'SWITCH_TODO_DONE_STATUS': {\n            const targetTodoIndex = state.todos.findIndex((todo: Todo) => todo.id === action.payload)\n            const newTodos = [...state.todos]\n\n            newTodos[targetTodoIndex] = {\n                ...newTodos[targetTodoIndex],\n                done: !newTodos[targetTodoIndex].done\n            }\n\n            return {\n                ...state,\n                todos: [...newTodos],\n                displayTodos: filterDisplayTodos(state.filterDoneTodo, [...newTodos])\n            }\n        }\n\n        case 'SWITCH_FILTER_DONE_TODO': {\n            return {\n                ...state,\n                filterDoneTodo: !state.filterDoneTodo,\n                displayTodos: filterDisplayTodos(!state.filterDoneTodo, [...state.todos])\n            }\n        }\n        case 'GET_TODO_BY_ID':\n            const todo: Todo = state.todos.find((todo: Todo) => todo.id === action.payload) || initialState.todo\n            return {\n                ...state,\n                todo\n            }\n\n        default:\n            return state\n    }\n}\n\nexport default todos","import { createStore } from \"redux\";\nimport todos from '../reducers/todo'\n\nexport type rootState = ReturnType<typeof todos>\n\nexport default createStore(todos)","import React from \"react\";\nimport \"./index.css\";\n\ntype FilterProps = {\n  filterDoneTodo: boolean;\n  switchFilterDoneTodo: () => void;\n};\n\nconst Filter = (props: FilterProps) => {\n  return (\n    <div className=\"filter\">\n      <input\n        type=\"checkbox\"\n        checked={props.filterDoneTodo}\n        onChange={props.switchFilterDoneTodo}\n      />\n      隱藏已完成事項\n    </div>\n  );\n};\n\nexport default Filter;\n","import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { Todo } from \"../../types/todoList\";\n\ntype TodoProps = {\n  todo: Todo;\n  switchTodoDoneStatus: (id: number) => void;\n  deleteTodo: (id: number) => void;\n};\n\nconst TodoItem = (props: TodoProps) => {\n  const history = useHistory();\n  return (\n    <div className=\"todoItem\">\n      <span\n        style={{ textDecoration: props.todo.done ? \"line-through\" : \"none\" }}\n      >\n        {props.todo.name}\n      </span>\n      <div>\n        <input\n          type=\"checkbox\"\n          checked={props.todo.done}\n          onChange={() => {\n            props.switchTodoDoneStatus(props.todo.id);\n          }}\n        />\n        <button\n          type=\"button\"\n          onClick={() => {\n            history.push(`/todo/${props.todo.id}`);\n          }}\n        >\n          詳細資訊\n        </button>\n        <button\n          type=\"button\"\n          onClick={() => {\n            props.deleteTodo(props.todo.id);\n          }}\n        >\n          刪除\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default TodoItem;\n","import React, { useState } from \"react\";\nimport { Todo } from \"../../types/todoList\";\nimport \"./index.css\";\n\ntype FormProps = {\n  addTodo: (todo: Todo) => void;\n};\n\nconst Form = (props: FormProps) => {\n  const [name, setName] = useState<string>(\"\");\n\n  const submitForm = () => {\n    const newTodo = { id: Math.random(), name, done: false };\n    props.addTodo(newTodo);\n    setName(\"\");\n  };\n\n  return (\n    <div className=\"form\">\n      <span>Add to the todo list</span>\n      <div>\n        <input\n          type=\"input\"\n          className=\"todoInput\"\n          value={name}\n          onChange={(e) => {\n            setName(e.target.value);\n          }}\n        />\n        <button type=\"button\" className=\"submitBtn\" onClick={submitForm}>\n          ADD\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Form;\n","import TodoList from \"./TodoList\";\n\nexport default TodoList;","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport \"./index.css\";\nimport Filter from \"./Filter\";\nimport TodoItem from \"./TodoItem\";\nimport Form from \"./Form\";\nimport {\n  addTodo,\n  deleteTodo,\n  switchTodoDoneStatus,\n  switchFilterDoneTodo,\n} from \"../../actions/todo\";\nimport { rootState } from \"../../store\";\n\nconst TodoList = () => {\n  const dispatch = useDispatch();\n  return (\n    <div className=\"layout\">\n      <div className=\"todoListWrapper\">\n        <div className=\"header\">\n          <span className=\"title\">TodoList</span>\n          <span className=\"subTitle\">Hi~</span>\n        </div>\n        <Filter\n          filterDoneTodo={useSelector(\n            (state: rootState) => state.filterDoneTodo\n          )}\n          switchFilterDoneTodo={() => dispatch(switchFilterDoneTodo())}\n        />\n        <div className=\"todoList\">\n          {useSelector((state: rootState) => state.displayTodos).map((todo) => (\n            <TodoItem\n              key={todo.id}\n              todo={todo}\n              switchTodoDoneStatus={(id) => dispatch(switchTodoDoneStatus(id))}\n              deleteTodo={(id) => dispatch(deleteTodo(id))}\n            />\n          ))}\n        </div>\n        <Form addTodo={(todo) => dispatch(addTodo(todo))} />\n      </div>\n    </div>\n  );\n};\n\nexport default TodoList;\n","import { Todo } from \"../types/todoList\";\n\ninterface AddTodo {\n    type: 'ADD_TODO'\n    payload: Todo\n}\n\ninterface DeleteAdd {\n    type: 'DELETE_TODO'\n    payload: number\n}\n\ninterface SwitchTodoDoneStatus {\n    type: 'SWITCH_TODO_DONE_STATUS',\n    payload: number\n}\n\ninterface SwitchFilterDoneTodo {\n    type: 'SWITCH_FILTER_DONE_TODO'\n}\n\ninterface GetTodoById {\n    type: 'GET_TODO_BY_ID',\n    payload: number\n}\n\nexport const addTodo = (todo: Todo): AddTodo => ({\n    type: 'ADD_TODO',\n    payload: todo\n})\n\nexport const deleteTodo = (id: number): DeleteAdd => ({\n    type: 'DELETE_TODO',\n    payload: id\n})\n\nexport const switchTodoDoneStatus = (id: number): SwitchTodoDoneStatus => ({\n    type: 'SWITCH_TODO_DONE_STATUS',\n    payload: id\n})\n\nexport const switchFilterDoneTodo = (): SwitchFilterDoneTodo => ({\n    type: 'SWITCH_FILTER_DONE_TODO'\n})\n\nexport const getTodoById = (id: number): GetTodoById => ({\n    type: 'GET_TODO_BY_ID',\n    payload: id\n})\n\nexport type TodoActionTypes = AddTodo | DeleteAdd | SwitchTodoDoneStatus | SwitchFilterDoneTodo | GetTodoById","import Todo from \"./Todo\";\n\nexport default Todo","import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport { rootState } from \"../../store\";\nimport { Todo as ITodo } from \"../../types/todoList\";\nimport { getTodoById } from \"../../actions/todo\";\nimport \"./index.css\";\n\nconst Todo = () => {\n  const history = useHistory();\n  const { id }: { id: string } = useParams();\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(getTodoById(Number(id)));\n  });\n\n  const todo: ITodo = useSelector((state: rootState) => state.todo);\n\n  return (\n    <div className=\"layout\">\n      <div className=\"todo\">\n        <span>ID:{todo.id}</span>\n        <h1>{todo.name}</h1>\n        <p>\n          完成狀況:\n          <span style={{ color: todo.done ? \"#21bf73\" : \"#eb8f8f\" }}>\n            {todo.done ? \"已完成\" : \"未完成\"}\n          </span>\n        </p>\n        <button type=\"button\" onClick={() => history.push(\"/\")}>\n          回代辦事項列表\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Todo;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { HashRouter, Switch, Route } from \"react-router-dom\";\nimport store from \"./store\";\nimport TodoList from \"./views/TodoList\";\nimport Todo from \"./views/Todo\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <HashRouter>\n      <Switch>\n        <Route exact path=\"/\" component={TodoList} />\n        <Route path=\"/todo/:id\" component={Todo} />\n      </Switch>\n    </HashRouter>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}